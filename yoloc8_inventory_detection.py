# -*- coding: utf-8 -*-
"""yoloc8_inventory_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zV8TGvt3uVkD7WG-iEYDdqwnYQjOt2SM
"""

!pip install ultralytics opencv-python

import cv2
from ultralytics import YOLO
import numpy as np

# Load the YOLOv8 model
model = YOLO("yolov8n.pt")  # Use 'yolov8n.pt' for the nano model, adjust with custom weights if available

# Define labels for classes you want to detect
# E.g., assuming COCO dataset labels for common items like 'bottle', 'book', etc.
TARGET_CLASSES = ['bottle', 'book', 'laptop', 'box', 'chair']  # Specify relevant items for inventory

def detect_items(image_path):
    # Read the image
    img = cv2.imread(image_path)
    if img is None:
        print("Image not found.")
        return None

    # Run YOLOv8 model on the image
    results = model(img)

    # Dictionary to store count of each target item
    item_counts = {item: 0 for item in TARGET_CLASSES}

    # Process results and count items
    for result in results[0].boxes:
        class_id = int(result.cls)  # Class ID of detected object
        class_name = model.names[class_id]

        # If the detected class is one of the target items, increment the count
        if class_name in TARGET_CLASSES:
            item_counts[class_name] += 1

            # Draw bounding box on detected items for visualization
            x1, y1, x2, y2 = map(int, result.xyxy[0])
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(img, f"{class_name} ({item_counts[class_name]})", (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Display the annotated image with counts
    cv2.imshow("Detected Items", img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    return item_counts

import cv2
from ultralytics import YOLO
import numpy as np
from google.colab.patches import cv2_imshow  # For displaying images in Colab

# Load the YOLOv8 model
model = YOLO("yolov8n.pt")  # Use 'yolov8n.pt' for the nano model, adjust with custom weights if available

# Define labels for classes you want to detect
TARGET_CLASSES = ['bottle', 'book', 'laptop', 'box', 'chair']  # Specify relevant items for inventory

def detect_items(image_path):
    # Read the image
    img = cv2.imread(image_path)
    if img is None:
        print("Image not found.")
        return None

    # Run YOLOv8 model on the image
    results = model(img)

    # Dictionary to store count of each target item
    item_counts = {item: 0 for item in TARGET_CLASSES}

    # Process results and count items
    for result in results[0].boxes:
        class_id = int(result.cls)  # Class ID of detected object
        class_name = model.names[class_id]

        # If the detected class is one of the target items, increment the count
        if class_name in TARGET_CLASSES:
            item_counts[class_name] += 1

            # Draw bounding box on detected items for visualization
            x1, y1, x2, y2 = map(int, result.xyxy[0])
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(img, f"{class_name} ({item_counts[class_name]})", (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Display the annotated image with counts in Colab
    cv2_imshow(img)

    return item_counts

# Example usage
image_path = "/content/inventory2.jpeg"  # Replace with your image path
item_counts = detect_items(image_path)

if item_counts:
    print("Detected items and counts:")
    for item, count in item_counts.items():
        print(f"{item}: {count}")

import cv2
from ultralytics import YOLO
import numpy as np
from google.colab.patches import cv2_imshow  # For displaying images in Colab
from google.colab import files  # For uploading files

# Load the YOLOv8 model
model = YOLO("yolov8n.pt")  # Use 'yolov8n.pt' for the nano model, adjust with custom weights if available

# Define labels for classes you want to detect
TARGET_CLASSES = ['bottle', 'book', 'laptop', 'box', 'chair']  # Specify relevant items for inventory

def detect_items(img):
    # Run YOLOv8 model on the image
    results = model(img)

    # Dictionary to store count of each target item
    item_counts = {item: 0 for item in TARGET_CLASSES}

    # Process results and count items
    for result in results[0].boxes:
        class_id = int(result.cls)  # Class ID of detected object
        class_name = model.names[class_id]

        # If the detected class is one of the target items, increment the count
        if class_name in TARGET_CLASSES:
            item_counts[class_name] += 1

            # Draw bounding box on detected items for visualization
            x1, y1, x2, y2 = map(int, result.xyxy[0])
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(img, f"{class_name} ({item_counts[class_name]})", (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Display the annotated image with counts in Colab
    cv2_imshow(img)

    return item_counts

# Allow the user to upload multiple images
uploaded_files = files.upload()

# Process each uploaded image
for file_name in uploaded_files:
    print(f"\nProcessing {file_name}")

    # Read the image
    img = cv2.imread(file_name)
    if img is None:
        print(f"Could not read image: {file_name}")
        continue

    # Perform detection and get item counts
    item_counts = detect_items(img)

    # Display item counts for the image
    print("Detected items and counts:")
    for item, count in item_counts.items():
        print(f"{item}: {count}")